import os
import asyncio
import json
import configparser
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ImportChatInviteRequest, GetDialogsRequest
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.types import InputPeerChannel, Channel, ChatInviteAlready

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
config = configparser.ConfigParser()
config.read('config.ini')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
INVITE_LINK = config.get('SETTINGS', 'INVITE_LINK')
ONLINE_TIME = config.getint('SETTINGS', 'ONLINE_TIME')
JOIN_COUNT = config.getint('SETTINGS', 'JOIN_COUNT')
LEAVE_COUNT = config.getint('SETTINGS', 'LEAVE_COUNT')
DATA_DIR = 'data'

class AccountManager:
    def __init__(self):
        self.joined_accounts = 0
        self.left_accounts = 0

    async def process_account(self, session_file, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∞"""
        session_name = os.path.splitext(session_file)[0]
        json_file = os.path.join(DATA_DIR, session_file.replace('.session', '.json'))
        
        try:
            with open(json_file, 'r') as f:
                account_data = json.load(f)
        except Exception as e:
            print(f"[{session_name}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

        client = TelegramClient(
            session=os.path.join(DATA_DIR, session_file),
            api_id=account_data['app_id'],
            api_hash=account_data['app_hash']
        )

        try:
            await client.connect()
            
            if not await client.is_user_authorized():
                print(f"[{session_name}] ‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return False

            me = await client.get_me()
            print(f"\n[{session_name}] üë§ –ê–∫–∫–∞—É–Ω—Ç: @{me.username or '–Ω–µ—Ç'} (ID: {me.id})")

            if action == 'join':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ö–æ–¥–∞
                if self.joined_accounts >= JOIN_COUNT:
                    print(f"[{session_name}] ‚ÑπÔ∏è –õ–∏–º–∏—Ç –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({JOIN_COUNT})")
                    return False
                
                # –í—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª
                result = await self._join_channel(client, session_name)
                if result:
                    self.joined_accounts += 1
                    return True
                return False

            elif action == 'leave':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—ã—Ö–æ–¥–∞
                if self.left_accounts >= LEAVE_COUNT:
                    print(f"[{session_name}] ‚ÑπÔ∏è –õ–∏–º–∏—Ç –≤—ã—Ö–æ–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({LEAVE_COUNT})")
                    return False
                
                # –í—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞
                result = await self._leave_channel(client, session_name)
                if result:
                    self.left_accounts += 1
                    return True
                return False

        except Exception as e:
            print(f"[{session_name}] ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await client.disconnect()
            print(f"[{session_name}] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ")

    async def _join_channel(self, client, session_name):
        """–í—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª"""
        try:
            target_entity = None
            try:
                target_entity = await client.get_entity(INVITE_LINK)
                if isinstance(target_entity, Channel):
                    print(f"[{session_name}] ‚ÑπÔ∏è –£–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ: {target_entity.title}")
                    return True
            except:
                pass

            try:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                target_entity = await client.get_entity(INVITE_LINK)
                if isinstance(target_entity, Channel):
                    print(f"[{session_name}] üåê –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: {target_entity.title}")
                    await client(JoinChannelRequest(target_entity))
                    return True
            except:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
                try:
                    hash_part = extract_hash(INVITE_LINK)
                    result = await client(ImportChatInviteRequest(hash=hash_part))
                    target_entity = result.chats[0]
                    print(f"[{session_name}] üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞): {target_entity.title}")
                    return True
                except Exception as e:
                    print(f"[{session_name}] ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
                    return False
        except Exception as e:
            print(f"[{session_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            return False

    async def _leave_channel(self, client, session_name):
        """–í—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_to_leave = await get_last_joined_channel(client)
            if channel_to_leave:
                await client(LeaveChannelRequest(channel_to_leave))
                print(f"[{session_name}] üö™ –£—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_to_leave.title}")
                return True
            else:
                print(f"[{session_name}] ‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞")
                return False
        except Exception as e:
            print(f"[{session_name}] ‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}")
            return False

def extract_hash(invite_link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö—ç—à –∏–∑ invite-—Å—Å—ã–ª–∫–∏"""
    if invite_link.startswith('https://t.me/+'):
        return invite_link.split('+')[-1]
    return invite_link

async def get_last_joined_channel(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    result = await client(GetDialogsRequest(
        offset_date=None,
        offset_id=0,
        offset_peer=InputPeerChannel(0, 0),
        limit=100,
        hash=0
    ))
    
    for dialog in result.dialogs:
        if isinstance(dialog.entity, Channel):
            return dialog.entity
    return None

def get_valid_sessions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö session —Ñ–∞–π–ª–æ–≤"""
    return [
        f for f in os.listdir(DATA_DIR)
        if f.endswith('.session') and 
        os.path.exists(os.path.join(DATA_DIR, f.replace('.session', '.json')))
    ]

async def main():
    print("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    sessions = get_valid_sessions()
    
    if not sessions:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ data!")
        return

    print(f"üî¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(sessions)}")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {INVITE_LINK}")
    print(f"‚è± –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {ONLINE_TIME//60} –º–∏–Ω—É—Ç")
    print(f"‚ÜóÔ∏è –ú–∞–∫—Å–∏–º—É–º –≤—Ö–æ–¥–∞: {JOIN_COUNT}")
    print(f"‚ÜôÔ∏è –ú–∞–∫—Å–∏–º—É–º –≤—ã—Ö–æ–¥–∞: {LEAVE_COUNT}\n")

    manager = AccountManager()

    # –§–∞–∑–∞ –≤—Ö–æ–¥–∞
    print("\n=== –§–ê–ó–ê –í–•–û–î–ê ===")
    for session in sessions:
        if manager.joined_accounts >= JOIN_COUNT:
            break
        await manager.process_account(session, 'join')

    # –û–∂–∏–¥–∞–Ω–∏–µ
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {ONLINE_TIME//60} –º–∏–Ω—É—Ç...")
    await asyncio.sleep(ONLINE_TIME)

    # –§–∞–∑–∞ –≤—ã—Ö–æ–¥–∞
    print("\n=== –§–ê–ó–ê –í–´–•–û–î–ê ===")
    for session in sessions:
        if manager.left_accounts >= min(LEAVE_COUNT, manager.joined_accounts):
            break
        await manager.process_account(session, 'leave')

    print("\n‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print(f"‚ÜóÔ∏è –í—Å–µ–≥–æ –≤–æ—à–ª–æ: {manager.joined_accounts}/{JOIN_COUNT}")
    print(f"‚ÜôÔ∏è –í—Å–µ–≥–æ –≤—ã—à–ª–æ: {manager.left_accounts}/{min(LEAVE_COUNT, manager.joined_accounts)}")

if __name__ == "__main__":
    asyncio.run(main())